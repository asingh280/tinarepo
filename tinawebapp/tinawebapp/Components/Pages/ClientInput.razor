@page "/client"
@using System
@using Microsoft.AspNetCore.Components.Forms
<PageTitle>Client Input</PageTitle>
<body>
	<EditForm Model="@task">
   
    <div class="row">
        <div class="col-md-6">

            <label for="type">Type of Request:</label>
            <InputSelect id="type" @bind-Value="@task.Type">
                <option value="" enabled>Select a type</option>
                <option value="Option1">Request For Information</option>
                <option value="Option2">Document Review</option>
            </InputSelect>

            <label for="startDate">Start Date:</label>
            <InputDate id="startDate" @bind-Value="@task.StartDate" />

            <label for="dueDate">Due Date:</label>
            <InputDate id="dueDate" @bind-Value="@task.DueDate" />

            <label for="priority">Priority Level:</label>
            <InputSelect id="priority" @bind-Value="@task.Priority">
                <option value="">Select priority</option>
                <option value="Low">Low</option>
                <option value="Medium">Medium</option>
                <option value="High">High</option>
            </InputSelect>
        </div>

        <div class="col-md-6">
            <label for="description">Description:</label>
            <InputTextArea id="description" @bind-Value="@task.Description" />

                <label for="fileUpload">File Attachments:</label>
                <InputFile id="fileUpload" multiple OnChange="@HandleFileUpload" />

                <!-- List to display selected files -->
                <ul>
                    @if (selectedFiles != null)
                    {
                        foreach (var file in selectedFiles)
                        {
                            <li>@file.Name</li>
                        }
                    }
                </ul>
            </div>
                <button type="button" class="btn" @onclick="Btn">Submit</button>
            </div>
    </EditForm>
</body>
    

@code {
    private void HandleFileUpload(InputFileChangeEventArgs e)
    {
        const long maxFileSize = 2L * 1024 * 1024 * 1024; // 2 GB in bytes
        long totalSize = 0;

        foreach (var file in e.GetMultipleFiles())
        {
            totalSize += file.Size;
            if (totalSize > maxFileSize)
            {
                // Handle the case where total file size exceeds 2 GB
                // You can show an error message to the user
                return;
            }

            selectedFiles.Clear(); // Clear the current file list
            selectedFiles.AddRange(e.GetMultipleFiles());

            // Process each file here
        }

        // Continue with the upload logic if the size is within the limit
    }

    private List<IBrowserFile> selectedFiles = new List<IBrowserFile>();
}
